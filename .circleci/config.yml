version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: rollback environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:8}
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:8}
      - run:
          name: S3 bucket and objects rollback
          when: on_fail
          command: |
            # deleting objects
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:8} --recursive 
            # deleting bucket
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:8} --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.   
    steps:
      - run:
          name: Migration Rollback
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request GET https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID})
            # migration status value 
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
              cd backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend            
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # job code here
      - run:
          name: frontend Test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # backend job code here
      - run:
          name: backend Test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      # Docker image
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: frontend Test
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: backend Test
          command: |
            cd backend
            npm install
            # npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli:latest
    steps:
      # Checkout code from git
      - checkout
      - run:
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="udapeople" \
              --stack-name backend-${CIRCLE_WORKFLOW_ID:0:8} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:8}"

      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="udapeople" \
              --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:8} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:8}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            ip=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text) 

            echo "$ip" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: IP-${CIRCLE_WORKFLOW_ID:0:8}" \
            --request PUT \
            --data "$ip" https://api.memstash.io/values/IP
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["5a:0a:bf:60:7b:04:c8:c8:2e:80:d7:95:de:94:1d:de"]
      # attach workspace
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache python3 py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt \
            .circleci/ansible/configure-server.yml
      # rollback on failure
      - destroy-environment
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout 
      - run:
          name: awscli install
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -qq install awscli
            sudo apt-get -y -qq install python3
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            echo -e " ENVIROMENT=production\n
                      TYPEORM_CONNECTION=$TYPEORM_CONNECTION\n
                      TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR\n
                      TYPEORM_ENTITIES=$TYPEORM_ENTITIES\n
                      TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS\n
                      TYPEORM_HOST=$TYPEORM_HOST\n
                      TYPEORM_PORT=$TYPEORM_PORT\n
                      TYPEORM_USERNAME=$TYPEORM_USERNAME\n
                      TYPEORM_PASSWORD=$TYPEORM_PASSWORD\n
                      TYPEORM_DATABASE=$TYPEORM_DATABASE\n" > .env

            cat .env
            npm install
            npm start
            npm run migrations > migrationResult.txt
            echo "Here is migration file data :"
            cat migrationResult.txt
          no_output_timeout: 20m         

      - run:
          name: Send migration results to memstash
          command: |
            command: |
            echo "checking last Migration status..."
            IF grep -i "has been executed successfully" migrationResult.txt
            THEN             
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}			  
              echo "Last migration request completed, a success indicator (1) has been saved into memstash"
            ELSE
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}			  
              echo "Last migration request failed, a failure indicator (0) has been saved into memstash"
            FI
      - run:
          name: LogOnFail
          when: on_fail
          command: |
            cat /home/circleci/.npm/_logs/*-debug.log
            ls -la
            cat backend/migration.txt      
     # rollback on failure  
      - revert-migrations
      - destroy-environment  

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout 
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip 
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs 
 
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(curl -H "token: IP-${CIRCLE_WORKFLOW_ID:0:8}" \
                        --request GET https://api.memstash.io/values/IP)

            export API_URL="http://${BACKEND_IP}:3030"

            echo "${API_URL}"          
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            npm install webpack-dev-server -g
            cd frontend
            npm install
            npm run build
            ls ./dist
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:8} --recursive
      # rollback on failure      
      - revert-migrations
      - destroy-environment

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout 
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["5a:0a:bf:60:7b:04:c8:c8:2e:80:d7:95:de:94:1d:de"]
      # attach workspace
      - attach_workspace:
          at: /tmp/.circleci/ansible
      
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible
            ansible --version
            apk add --update tar gzip curl
            apk add --update openssh-client
      - run:
          name: Deploy backend
          command: |
            # your code here
            ANSIBLE_HOST_KEY_CHECKING=False \
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt \
            .circleci/ansible/deploy-backend.yml
          no_output_timeout: 15m
      # rollback on failure 
      - revert-migrations
      - destroy-environment
  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout 
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar gzip curl
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            BACKEND_IP=$(curl -H "token: IP-${CIRCLE_WORKFLOW_ID:0:8}" \
                        --request GET https://api.memstash.io/values/IP)
            URL="http://$BACKEND_IP:3030/api/status"
            echo $URL
            curl $URL
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:8}.s3-website-us-west-2.amazonaws.com"
            echo "S3 URL is "
            echo $URL
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      #- test-frontend:
       #   requires: [build-frontend]
     # - test-backend:
     #     requires: [build-backend]
     # - scan-backend:
      #    requires: [build-backend]
     # - scan-frontend:
      #    requires: [build-frontend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: [master]

